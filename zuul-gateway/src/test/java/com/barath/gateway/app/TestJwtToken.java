package com.barath.gateway.app;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;
import java.util.Base64.Decoder;

import org.junit.Test;
import org.springframework.security.jwt.Jwt;
import org.springframework.security.jwt.JwtHelper;
import org.springframework.security.jwt.crypto.sign.RsaVerifier;
import org.springframework.security.jwt.crypto.sign.SignatureVerifier;

public class TestJwtToken {
	
	@Test
	public void decodeToken() {
		String token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxb2o2R3NoZnVSLWpiZ0hCMXRsbmFRM1VvRWU3R2xDVkswd3hvUzA4ZmxRIn0.eyJqdGkiOiJiYjE3YjQ2ZC00OGI4LTQyMmQtOGM5Mi03NzY2ZWZlYTk5MTUiLCJleHAiOjE1NzA3MTQ2MjQsIm5iZiI6MCwiaWF0IjoxNTcwNzEzNzI0LCJpc3MiOiJodHRwOi8vNTIuODcuMjI3LjIyNTo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxMmY3OTIzNi1hNTlkLTRjZDktOGVhNy0xMjFmNjU4YjQ5YjkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJkZW1vLWFwcCIsIm5vbmNlIjoiSUJVV2tKZVR6Tm1rVnVobTEzYWViWDhKNy1ya1pOa0NiQ1p5aDdXX3M1WmE0IiwiYXV0aF90aW1lIjoxNTcwNzEzNzIxLCJzZXNzaW9uX3N0YXRlIjoiMTQ0ZTYxZjktNDJjMS00YWVmLWJmMWItYTAwNzcyMzRlZGE5IiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ2aWV3LXJvbGUiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgbWljcm9wcm9maWxlLWp3dCBhZGRyZXNzIHByb2ZpbGUgZW1haWwiLCJ1cG4iOiJiYXJhdGgiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImFkZHJlc3MiOnt9LCJuYW1lIjoiYmFyYXRoIGJhcmF0aCIsImdyb3VwcyI6WyJ2aWV3LXJvbGUiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl0sInByZWZlcnJlZF91c2VybmFtZSI6ImJhcmF0aCIsImdpdmVuX25hbWUiOiJiYXJhdGgiLCJmYW1pbHlfbmFtZSI6ImJhcmF0aCIsImVtYWlsIjoiYmFyYXRoQGdtYWlsLmNvbSJ9.MDpo3p6KAVLjrkneOOTvds3v8K3cR_W3BgSrgJgeiqzZXTwNJoNb83yzgEpqnyWG3GpQpjm4I4qxaMoBYyhxO-qUzUmiq6BF-N1wSazxUW_G_SfMdoNn7N9NgX_rWlL6kKDKFO7hF5VL4SYJQpzXi7T9OJIrnV6yFwjOYR8fAQqGZpRM6Dt4NkOwbqlCm_8cfjlY-7utJNuTF9t1juKcc2PDW73b-9SVl1oPTs7De7UGc3FlttgI01uko_eM_HAv3ODptg7K--m4fg01jaKzRRbRBiWIVwuUOEFvbR4ZsNt6Uk6XliDhFoo37RvZx1XDOpHSAddD6vQkX_n0fq1w1A.eyJqdGkiOiJjMDcyODAyZi1kNjhjLTQ4ZmItYjJlNi0yMTc4MTg0MGFkZmMiLCJleHAiOjE1NzA3MTIwMjcsIm5iZiI6MCwiaWF0IjoxNTcwNzExMTI3LCJpc3MiOiJodHRwOi8vNTIuODcuMjI3LjIyNTo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxMmY3OTIzNi1hNTlkLTRjZDktOGVhNy0xMjFmNjU4YjQ5YjkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJkZW1vLWFwcCIsIm5vbmNlIjoiaE5VTEpPeUg2cFQ1NVJlWEdwODFUOFJ0cEMxX2hKQ0FYMDRsMTFYSlh0YlQxIiwiYXV0aF90aW1lIjoxNTcwNzExMTI1LCJzZXNzaW9uX3N0YXRlIjoiZWMxOWM0MzItYTY4Yi00YzBkLWFiMzMtN2M4NTk4MDVlZjI5IiwiYWNyIjoiMCIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ2aWV3LXJvbGUiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgbWljcm9wcm9maWxlLWp3dCBhZGRyZXNzIHByb2ZpbGUgZW1haWwiLCJ1cG4iOiJiYXJhdGgiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImFkZHJlc3MiOnt9LCJuYW1lIjoiYmFyYXRoIGJhcmF0aCIsImdyb3VwcyI6WyJ2aWV3LXJvbGUiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl0sInByZWZlcnJlZF91c2VybmFtZSI6ImJhcmF0aCIsImdpdmVuX25hbWUiOiJiYXJhdGgiLCJmYW1pbHlfbmFtZSI6ImJhcmF0aCIsImVtYWlsIjoiYmFyYXRoQGdtYWlsLmNvbSJ9.RV-9t7iSw7xqalBpIY7VYODBse4JdztdQcczjCpsWpfBcPjQ5gxfu2PW4QNGV50zJ2Na2QxogPO7Efs9U9dtb2jp4Z67jcetcHOOBEVhIANEPyx5sO_qS54no_yyHRjrek0FYXfk0kDl8p1UeJieF8MQ8UpQmh-uUh6Dhc1tT7_9hkGetwll6Be7j03DofKca7zILntWtJl-o-RACg11eOLSzwBLKk-SMwrw-nv0m-FENazJ3dI_pD36s3PLV1klPF6iklO8Cx8muOgVJCq4R8fmflqBh54lJdoGI784U1fQfnaX9ViXZ5rhzb_vYYmhogFqbvOR_cef7gnkLyV-jg" ;
	//	 KeyFactory keyFactory = KeyFactory.getInstance("RSA");          
         Decoder decoder = Base64.getDecoder();//URL-safe Base64 decoder

        // BigInteger modulus = new BigInteger(decoder.decode(PUBLIC_KEY_MODULUS.getBytes()));
        // BigInteger publicExponent = new BigInteger(decoder.decode(PUBLIC_KEY_PUBLIC_EXPONENT.getBytes()));

       //  RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, publicExponent);
        // PublicKey newPublicKey = keyFactory.generatePublic(spec);

         //RsaVerifier verifier= new RsaVerifier((RSAPublicKey) newPublicKey, "RSA");
		
		//Jwt jwt = JwtHelper.decodeAndVerify(token,verifier);
	}

}
